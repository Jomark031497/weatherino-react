{"version":3,"sources":["components/Header.js","components/SearchForm.js","components/DisplayWeather.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","SearchForm","handleSubmit","e","preventDefault","state","city","props","searchCity","setState","handleChange","target","name","value","onSubmit","this","type","placeholder","onChange","DisplayWeather","weather","country","temp","condition","App","a","isLoading","fetch","mode","response","json","data","console","log","sys","Math","round","main","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+SAYeA,G,MAVf,uKAEQ,OACI,yBAAKC,UAAU,oBACX,wDAJhB,GAA4BC,c,OCoCbC,EApCf,kDACE,aAAe,IAAD,8BACZ,gBAKFC,aAAe,SAACC,GACdA,EAAEC,iBACsB,OAApB,EAAKC,MAAMC,MAAqC,KAApB,EAAKD,MAAMC,OAC3C,EAAKC,MAAMC,WAAW,EAAKH,MAAMC,MACjC,EAAKG,SAAS,CAAEH,KAAM,OAVV,EAadI,aAAe,SAACP,GACd,EAAKM,SAAL,eAAiBN,EAAEQ,OAAOC,KAAOT,EAAEQ,OAAOE,SAZ1C,EAAKR,MAAQ,CACXC,KAAM,IAHI,EADhB,qDAkBI,OACE,yBAAKP,UAAU,yBACb,0BAAMe,SAAUC,KAAKb,cACnB,2BACEc,KAAK,OACLC,YAAY,kCACZJ,MAAOE,KAAKV,MAAMC,KAClBY,SAAUH,KAAKL,aACfE,KAAK,SAEP,6BACA,2BAAOI,KAAK,SAASH,MAAM,iBA7BrC,GAAgCb,aCejBmB,EAff,uKACY,IACAC,EAAYL,KAAKR,MAAjBa,QACR,OACE,yBAAKrB,UAAU,6BACb,2BACGqB,EAAQd,KADX,KACmBc,EAAQC,SAE3B,2BAAID,EAAQE,KAAZ,UACA,2BAAIF,EAAQG,gBATpB,GAAoCvB,aC8DrBwB,EAxDf,kDACE,aAAe,IAAD,8BACZ,gBAYFhB,WAbc,uCAaD,WAAOF,GAAP,iBAAAmB,EAAA,sEAET,EAAKhB,SAAS,CAAEiB,WAAW,IAFlB,SAGcC,MAAM,oDAAD,OAC0BrB,EAD1B,wDAE1B,CAAEsB,KAAM,SALD,cAGHC,EAHG,gBAOUA,EAASC,OAPnB,OAOHC,EAPG,OAQTC,QAAQC,IAAIF,GAEZ,EAAKtB,SAAS,CACZW,QAAS,CACPd,KAAMyB,EAAKnB,KACXS,QAASU,EAAKG,IAAIb,QAClBC,KAAMa,KAAKC,MAAML,EAAKM,KAAKf,MAC3BC,UAAWQ,EAAKX,QAAQ,GAAGiB,MAE7BX,WAAW,IAjBJ,kDAoBTM,QAAQC,IAAR,MApBS,0DAbC,sDAEZ,EAAK5B,MAAQ,CACXe,QAAS,CACPd,KAAM,GACNe,QAAS,GACTC,KAAM,GACNC,UAAW,IAEbG,WAAW,GATD,EADhB,gEAuCIX,KAAKP,WAAWO,KAAKV,MAAMC,QAvC/B,+BA0CI,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAYE,WAAYO,KAAKP,aAC5BO,KAAKV,MAAMqB,UACV,uBAAG3B,UAAU,WAAb,cAEA,kBAAC,EAAD,CAAgBqB,QAASL,KAAKV,MAAMe,eAjD9C,GAAyBpB,aCILsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.115dd81c.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport class Header extends Component {\n    render() {\n        return (\n            <div className=\"header-container\">\n                <h1>Project: Weatherino</h1>\n            </div>\n        )\n    }\n}\n\nexport default Header\n","import React, { Component } from \"react\";\n\nexport class SearchForm extends Component {\n  constructor() {\n    super();\n    this.state = {\n      city: \"\",\n    };\n  }\n  handleSubmit = (e) => {\n    e.preventDefault();\n    if (this.state.city === null || this.state.city === \"\") return;\n    this.props.searchCity(this.state.city);\n    this.setState({ city: \"\" });\n  };\n\n  handleChange = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n  render() {\n    return (\n      <div className=\"search-form-container\">\n        <form onSubmit={this.handleSubmit}>\n          <input\n            type=\"text\"\n            placeholder=\"Enter City: Tokyo, Manila, etc.\"\n            value={this.state.city}\n            onChange={this.handleChange}\n            name=\"city\"\n          />\n          <br />\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default SearchForm;\n","import React, { Component } from \"react\";\n\nexport class DisplayWeather extends Component {\n  render() {\n    const { weather } = this.props;\n    return (\n      <div className=\"display-weather-container\">\n        <p>\n          {weather.city}, {weather.country}\n        </p>\n        <p>{weather.temp}Â° C</p>\n        <p>{weather.condition}</p>\n      </div>\n    );\n  }\n}\n\nexport default DisplayWeather;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\n//components\nimport Header from \"./components/Header\";\nimport SearchForm from \"./components/SearchForm\";\nimport DisplayWeather from \"./components/DisplayWeather\";\n\nexport class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      weather: {\n        city: \"\",\n        country: \"\",\n        temp: \"\",\n        condition: \"\",\n      },\n      isLoading: false,\n    };\n  }\n\n  searchCity = async (city) => {\n    try {\n      this.setState({ isLoading: true });\n      const response = await fetch(\n        `http://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&APPID=33b6c97cbe9b5cc44cfea7be5826600f`,\n        { mode: \"cors\" }\n      );\n      const data = await response.json();\n      console.log(data);\n\n      this.setState({\n        weather: {\n          city: data.name,\n          country: data.sys.country,\n          temp: Math.round(data.main.temp),\n          condition: data.weather[0].main,\n        },\n        isLoading: false,\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  componentDidMount() {\n    this.searchCity(this.state.city);\n  }\n  render() {\n    return (\n      <div>\n        <Header />\n        <SearchForm searchCity={this.searchCity} />\n        {this.state.isLoading ? (\n          <p className=\"loading\">Loading...</p>\n        ) : (\n          <DisplayWeather weather={this.state.weather} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}